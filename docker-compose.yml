name: "paperless-api"
version: "3.8"  

volumes:
  paperless-api:
  paperless-ui:
  rabbitmq:
  minio:
  postgres-db:
  elastic_search:

networks:
  frontend-nw:
     internal: false 
  backend-nw:
     driver: bridge
  
services:
  paperless-rest:
    image: if22b190/paperless:dev
    container_name: paperless-rest
    volumes:
      - paperless-api:/var/paperless-rest
    ports:
      - "8081:80"
    networks: 
      - backend-nw
    depends_on:
      - rabbitmq
      - minio
      - database
      - elastic_search

  paperless-ui:
    image: if22b190/paperless-ui:latest
    container_name: paperless-ui
    volumes:
      - paperless-ui:/var/www
    ports:
      - "80:4200"
    networks: 
      - frontend-nw
    depends_on:
      - paperless-rest

  paperless-services:
    image: if22b190/paperless-services:dev
    container_name: paperless-services
    volumes:
      - paperless-api:/var/paperless-services
    ports:
      - "8082:8000"
    networks:
      - backend-nw
    depends_on:
      - rabbitmq
      - minio
      - database
      - elastic_search

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
      - rabbitmq:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "9093:15672"
    networks: 
      - backend-nw

  minio:
    image: minio/minio
    container_name: minio
    volumes:
      - minio:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=passw0rd
      #- MINIO_Default_Bucket=paperless-bucket
    ports: 
      - "9000:9000"
      - "9090:9001"
    command: server /data --console-address ":9090"
    networks:
      - backend-nw

  database:
    image: postgres
    container_name: database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Paperless 
    volumes:
      - postgres-db:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql # erg√§nzung sobald wie eine sql.init file haben
    ports:
      - "5432:5432"
    networks: 
      - backend-nw
  
  adminer:
    image: adminer
    depends_on: 
      - database
    ports:
      - 9091:8080
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_HOST: database
    networks:
      - backend-nw
    
  elastic_search:
    image: elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
      - "xpack.security.enrollment.enabled=false"
    ports:
      - 9200:9200
      - 9300:9300 # custom binary protocol used for communications between nodes in a cluster
    networks:
      - backend-nw
    volumes:
      - elastic_search:/usr/share/elasticsearch/data
  
  elastic_search-ui:
    image: kibana:8.11.1
    ports:
      - 9092:5601
    networks:
      - backend-nw