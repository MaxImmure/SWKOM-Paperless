/*
 * Paperless Rest Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PaperlessRestService.Attributes;

using Microsoft.AspNetCore.Authorization;
using PaperlessRestService.Models;
using PaperlessRestService.BusinessLogic.DataAccess.Repositories;
using PaperlessRestService.BusinessLogic.Interfaces.Components;
using PaperlessRestService.BusinessLogic;
using PaperlessRestService.BusinessLogic.Entities;
using System.Linq;

namespace PaperlessRestService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TagsApiController : ControllerBase
    {
        private readonly ITagCRUDLogic tagLogic;
        private readonly BLActionExecuterMiddleware actionExecuter;

        public TagsApiController(ITagCRUDLogic tagLogic, BLActionExecuterMiddleware actionExecuter)
        {
            this.tagLogic = tagLogic;
            this.actionExecuter = actionExecuter;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/tags")]
        [ValidateModelState]
        [SwaggerOperation("CreateTag")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20017), description: "Success")]
        public virtual IActionResult CreateTag([FromBody]ApiTagsBody body)
        {
            Tag tag = new()
            {
                Id = 0, // gets auto incremented on insert
                Color = body.Color,
                IsInboxTag = body.IsInboxTag ?? false,
                IsInsensitive = body.IsInsensitive,
                Match = body.Match,
                MatchingAlgorithm = body.MatchingAlgorithm,
                Name = body.Name,
                OwnerId = null // hack: there are no users in the database so we need to set the foreign key to null
                //OwnerId = body.Owner
            };

            // ToDo validation

            bool success = actionExecuter.Execute<bool>(() =>
            {
                return tagLogic.Create(tag);
            });

            if (success)
            {
                return Ok();
            }
            else
            {
                return ControllerResponseFactory.CreateErrorResponse("There was an error inserting the tag");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Success</response>
        [HttpDelete]
        [Route("/api/tags/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTag")]
        public virtual IActionResult DeleteTag([FromRoute][Required]int? id)
        {
            if (!id.HasValue || id.Value == 0)
            {
                return ControllerResponseFactory.CreateBadRequestResponse("The Id may not be empty or null");
            }

            bool success = actionExecuter.Execute<bool>(() =>
            {
                return tagLogic.Delete(id.Value);
            });

            if (success)
            {
                return Ok();
            }
            else
            {
                return ControllerResponseFactory.CreateErrorResponse("There was an error deleting the tag");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="fullPerms"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/tags")]
        [ValidateModelState]
        [SwaggerOperation("GetTags")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetTagsResponse), description: "Success")]
        public virtual IActionResult GetTags([FromQuery]int? page, [FromQuery]bool? fullPerms)
        {
            List<Tag> tags = actionExecuter.Execute<List<Tag>>(() =>
            {
                return tagLogic.GetTags();
            });

            GetTagsResponse response = new GetTagsResponse()
            {
                Results = tags.Select( t => new InlineResponse20016Results()
                {
                    Color = t.Color,
                    Id = t.Id,
                    IsInboxTag = t.IsInboxTag,
                    IsInsensitive = t.IsInsensitive,
                    Match = t.Match,
                    MatchingAlgorithm = t.MatchingAlgorithm,
                    Name = t.Name,
                    Owner = t.OwnerId,
                    Slug = string.Empty,
                    Permissions = null,
                    TextColor = "black",
                    DocumentCount = null
                }).ToList()
            };

            return new ObjectResult(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        [HttpPut]
        [Route("/api/tags/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateTag")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20018), description: "Success")]
        public virtual IActionResult UpdateTag([FromRoute][Required]int? id, [FromBody]TagsIdBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20018));
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : 5,\n  \"matching_algorithm\" : 6,\n  \"user_can_change\" : true,\n  \"document_count\" : 1,\n  \"color\" : \"color\",\n  \"is_insensitive\" : true,\n  \"name\" : \"name\",\n  \"match\" : \"match\",\n  \"id\" : 0,\n  \"text_color\" : \"text_color\",\n  \"is_inbox_tag\" : true,\n  \"slug\" : \"slug\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20018>(exampleJson)
                        : default(InlineResponse20018);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
